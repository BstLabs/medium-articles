import shutil
import requests

from dataclasses import asdict, dataclass, field
from datetime import datetime
from enum import Enum



class Manufacturer(Enum):
    pfizer = 1
    moderna = 2
    astrazeneca = 3
    janssen = 4
    sinovac = 5


class ValidationException(Exception):
    pass


@dataclass
class Vaccination:
    manufacturer: Manufacturer
    date: str

    def __post_init__(self):
        try:
            date = datetime.strptime(self.date, "%Y-%m-%d")
        except Exception:
            raise ValidationException(
                "Vaccination date should be in format YYYY-MM-DD."
            )
        if date > datetime.today():
            raise ValidationException("Vaccination date should not be a future date.")


@dataclass
class QRCode:
    name: str
    birth: str
    vaccine: list[Vaccination] = field(default_factory=list)

def _prepare_vaccine_data(manufacturers: tuple[str], date: dict) -> list[Vaccination]:
    pass
    


def generate_qr_code(
    name: str, birth: str, *manufacturer: Manufacturer, **date: str
) -> None:
    """
    Generate your vaccination QR code.

    Args:
        name (str): name of the vaccinated person
        birth (str): birthday of the vaccinated person in YYYY-MM-DD format
        *manufacturer (Enum): manufacturer of the vaccine
        **date (str): date of the vaccination

    Return: None
    """
    dates: list[str] = list(date.values())
    
    qr_code = QRCode(
        name=name,
        birth=birth,
        vaccine=[Vaccination(manufacturer[i], dates[i]) for i in range(len(manufacturer))],
    )
    code = asdict(qr_code)
    res = requests.get(
        f"http://api.qrserver.com/v1/create-qr-code/?data={code}", stream=True
    )
    if res.status_code != 200:
        raise Exception("QR code cannot be generated by QR Code Generator API.")
    with open("qr_code.png", "wb") as f:
        res.raw.decode_content = True
        shutil.copyfileobj(res.raw, f)
    print("QR code has been generated.")
